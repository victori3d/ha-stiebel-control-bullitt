esphome:
  name: heatingpump
  friendly_name: "WP"

  platform: ESP32
  board: esp32dev
  includes: 
    - stiebeltools/ElsterTable.h
    - stiebeltools/KElsterTable.h
    - stiebeltools/KElsterTable.cpp
    - stiebeltools/NUtils.h
    - stiebeltools/NUtils.cpp
    - stiebeltools/NTypes.h
    - stiebeltools/heatingpump.h

# Enable Home Assistant API
api:
  encryption:
    key: "1cSivcBYHZBouiCgueZtgbwR0cBoKPVc48JNhvXK6JI="

# Enable logging
logger:
  level: INFO

ota:
  password: "f0e6110663e3bef67846f076d7e4db81"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: !secret wifi_static_ip
    gateway: !secret wifi_gateway
    subnet: !secret wifi_subnet
  use_address: heatingpump.local    

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Heatingpump Fallback Hotspot"
    password: !secret ap_password 

captive_portal:

#globals:

#########################################
#                                       #
#   SELECT                              #
#                                       #
#########################################
select:
  - platform: template
    name: "PROGRAMMSCHALTER_SET"
    id: PROGRAMMSCHALTER_SET
    options:
     - "Notbetrieb"
     - "Bereitschaft"
     - "Automatik"
     - "Tagbetrieb"
     - "Absenkbetrieb"
     - "Warmwasser"
     - "Unbekannt"
    initial_option: "Unbekannt"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            // Prüfe ob Dropdown nicht auf Unbekannt steht
            const char* auswahl = id(PROGRAMMSCHALTER_SET).state.c_str();
            if(strcmp(auswahl, "Unbekannt") != 0) {
              writeSignal(&CanMembers[cm_manager], GetElsterIndex("PROGRAMMSCHALTER"), auswahl);
              readSignal(&CanMembers[cm_manager], GetElsterIndex("PROGRAMMSCHALTER"));
            }
            return;

#########################################
#                                       #
#   SENSORS                             #
#                                       #
#########################################
sensor:

#########################################
#                                       #
#   KESSEL SENSOREN                      #
#                                       #
#########################################
  - platform: template
    name: "AUSSENTEMP"
    id: AUSSENTEMP
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_kessel], GetElsterIndex("AUSSENTEMP"));
      return {};

    #Warmwasser SOLL Komfort Temperatur
  - platform: template
    name: "EINSTELL_SPEICHERSOLLTEMP"
    id: EINSTELL_SPEICHERSOLLTEMP
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_kessel], GetElsterIndex("EINSTELL_SPEICHERSOLLTEMP"));
      return {};

    # Warmwasser SOLL Eco Temperatur
  - platform: template
    name: "EINSTELL_SPEICHERSOLLTEMP2"
    id: EINSTELL_SPEICHERSOLLTEMP2
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_kessel], GetElsterIndex("EINSTELL_SPEICHERSOLLTEMP2"));
      return {};

    #T Heizkreis Soll Abfrage
  - platform: template
    name: "HILFSKESSELSOLL"
    id: HILFSKESSELSOLL
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_kessel], GetElsterIndex("HILFSKESSELSOLL"));
      return {};

  - platform: template
    name: "INITIALISIERUNG_KESSEL"
    id: INITIALISIERUNG_KESSEL
    icon: "mdi:description"
    accuracy_decimals: 0

    #Rücklauftemperatur SOLL  - platform: template
  - platform: template
    name: "KESSELSOLLTEMP"
    id: KESSELSOLLTEMP
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_kessel], GetElsterIndex("KESSELSOLLTEMP"));
      return {};

    #Rücklauftemperatur IST
  - platform: template
    name: "RUECKLAUFISTTEMP_KESSEL"
    id: RUECKLAUFISTTEMP_KESSEL
    unit_of_measurement: "°C"
    icon: "mdi:waves-arrow-left"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_kessel], GetElsterIndex("RUECKLAUFISTTEMP"));
      return {};

    #Warmwasser-Temperaturabfrage + Gerätespezifischer Offset 3.9 °C
  - platform: template
    name: "SPEICHERISTTEMP"
    id: SPEICHERISTTEMP
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - offset: 3.9
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_kessel], GetElsterIndex("SPEICHERISTTEMP"));
      return {};

    #Warmwasser SOLL Temperatur
  - platform: template
    name: "SPEICHERSOLLTEMP"
    id: SPEICHERSOLLTEMP
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_kessel], GetElsterIndex("SPEICHERSOLLTEMP"));
      return {};

    #Vorlauftemperatur SOLL Heizung
  - platform: template
    name: "VORLAUFSOLLTEMP"
    id: VORLAUFSOLLTEMP
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_kessel], GetElsterIndex("VORLAUFSOLLTEMP"));
      return {};

    # Vorlauftemperatur IST Heizung
  - platform: template
    name: "WPVORLAUFIST_KESSEL"
    id: WPVORLAUFIST_KESSEL
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_kessel], GetElsterIndex("WPVORLAUFIST"));
      return {};

  - platform: template
    name: "BUSKONTROLLE"
    id: BUSKONTROLLE
    icon: "mdi:description"
    accuracy_decimals: 0

#########################################
#                                       #
#   MANAGER SENSOREN                    #
#                                       #
#########################################
  - platform: template
    name: "ANFAHRENT"
    id: ANFAHRENT
    state_class: "measurement"
    accuracy_decimals: 0

  - platform: template
    name: "GERAETEKONFIGURATION"
    id: GERAETEKONFIGURATION
    icon: "mdi:description"
    state_class: "measurement"
    accuracy_decimals: 0

  - platform: template
    name: "HARDWARE_NUMMER_MANAGER"
    id: HARDWARE_NUMMER_MANAGER
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "INDEX_NOT_FOUND_MANAGER"
    id: INDEX_NOT_FOUND_MANAGER
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "INITIALISIERUNG_MANAGER"
    id: INITIALISIERUNG_MANAGER
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "LAUFZEIT_VERD_BEI_SPEICHERBEDARF"
    id: LAUFZEIT_VERD_BEI_SPEICHERBEDARF
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LAUFZEIT_VERD_BEI_SPEICHERBEDARF"));
      return {};

  - platform: template
    name: "LUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER"
    id: LUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER"));
      return {};

  - platform: template
    name: "LZ_VERD_1_2_HEIZBETRIEB_MANAGER"
    id: LZ_VERD_1_2_HEIZBETRIEB_MANAGER
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_2_HEIZBETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_1_2_KUEHLBETRIEB_MANAGER"
    id: LZ_VERD_1_2_KUEHLBETRIEB_MANAGER
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_2_KUEHLBETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_1_2_WW_BETRIEB_MANAGER"
    id: LZ_VERD_1_2_WW_BETRIEB_MANAGER
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_2_WW_BETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_1_HEIZBETRIEB_MANAGER"
    id: LZ_VERD_1_HEIZBETRIEB_MANAGER
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_HEIZBETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_1_KUEHLBETRIEB_MANAGER"
    id: LZ_VERD_1_KUEHLBETRIEB_MANAGER
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_KUEHLBETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_1_WW_BETRIEB_MANAGER"
    id: LZ_VERD_1_WW_BETRIEB_MANAGER
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_WW_BETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_2_HEIZBETRIEB_MANAGER"
    id: LZ_VERD_2_HEIZBETRIEB_MANAGER
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_2_HEIZBETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_2_KUEHLBETRIEB_MANAGER"
    id: LZ_VERD_2_KUEHLBETRIEB_MANAGER
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_2_KUEHLBETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_2_WW_BETRIEB_MANAGER"
    id: LZ_VERD_2_WW_BETRIEB_MANAGER
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_2_WW_BETRIEB"));
      return {};
     
  - platform: template
    name: "PARAMETERSATZ_MANAGER"
    id: PARAMETERSATZ_MANAGER
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "QUELLENPUMPEN_STATUS"
    id: QUELLENPUMPEN_STATUS
    unit_of_measurement: "°C"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("PARAMETERSATZ"));
      return {};
     
  - platform: template
    name: "RAUMISTTEMP"
    id: RAUMISTTEMP
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMISTTEMP"));
      return {};
     
  - platform: template
    name: "RAUMSOLLTEMP_I"
    id: RAUMSOLLTEMP_I
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMSOLLTEMP_I"));
      return {};
     
  - platform: template
    name: "RAUMSOLLTEMP_II"
    id: RAUMSOLLTEMP_II
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMSOLLTEMP_II"));
      return {};
     
  - platform: template
    name: "RAUMSOLLTEMP_III"
    id: RAUMSOLLTEMP_III
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMSOLLTEMP_III"));
      return {};
     
  - platform: template
    name: "RAUMSOLLTEMP_NACHT"
    id: RAUMSOLLTEMP_NACHT
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMSOLLTEMP_NACHT"));
      return {};
     
  - platform: template
    name: "RUECKLAUFISTTEMP_MANAGER"
    id: RUECKLAUFISTTEMP_MANAGER
    unit_of_measurement: "°C"
    icon: "mdi:waves-arrow-left"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("RUECKLAUFISTTEMP"));
      return {};
     
  - platform: template
    name: "SAMMEL_RELAISSTATUS"
    id: SAMMEL_RELAISSTATUS
    icon: "mdi:switch"
    accuracy_decimals: 0

  - platform: template
    name: "SOFTWARE_NUMMER_MANAGER"
    id: SOFTWARE_NUMMER_MANAGER
    icon: "mdi:wysiwyg"
    accuracy_decimals: 0

  - platform: template
    name: "SOFTWARE_VERSION"
    id: SOFTWARE_VERSION
    icon: "mdi:wysiwyg"
    accuracy_decimals: 0

  - platform: template
    name: "SPEICHERBEDARF"
    id: SPEICHERBEDARF
    icon: "mdi:memory"
    state_class: "measurement"
    accuracy_decimals: 0

  - platform: template
    name: "TEILVORRANG_WW"
    id: TEILVORRANG_WW
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("TEILVORRANG_WW"));
      return {};
     
  - platform: template
    name: "TEMPORALE_LUEFTUNGSSTUFE_DAUER"
    id: TEMPORALE_LUEFTUNGSSTUFE_DAUER
    icon: "mdi:timer"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("TEMPORALE_LUEFTUNGSSTUFE_DAUER"));
      return {};
     
  - platform: template
    name: "VERDICHTER_MANAGER"
    id: VERDICHTER_MANAGER
    icon: "mdi:compress"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("VERDICHTER"));
      return {};
     
  - platform: template
    name: "VERSTELLTE_RAUMSOLLTEMP"
    id: VERSTELLTE_RAUMSOLLTEMP
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("VERSTELLTE_RAUMSOLLTEMP"));
      return {};
     
  - platform: template
    name: "WPVORLAUFIST_MANAGER"
    id: WPVORLAUFIST_MANAGER
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("WPVORLAUFIST"));
      return {};
     
  - platform: template
    name: "ZWISCHENEINSPRITZUNG_ISTTEMP"
    id: ZWISCHENEINSPRITZUNG_ISTTEMP
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("ZWISCHENEINSPRITZUNG_ISTTEMP"));
      return {};
     
  - platform: template
    name: "ACCESS_EEPROM"
    id: ACCESS_EEPROM
    icon: "mdi:memory"
    accuracy_decimals: 0

  - platform: template
    name: "JAHR"
    id: JAHR
    icon: "mdi:calendar_month"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("JAHR"));
      return {};

  - platform: template
    name: "MINUTE"
    id: MINUTE
    icon: "mdi:schedule"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("MINUTE"));
      return {};

  - platform: template
    name: "MONAT"
    id: MONAT
    icon: "mdi:calendar_month"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("MONAT"));
      return {};

  - platform: template
    name: "SEKUNDE"
    id: SEKUNDE
    icon: "mdi:schedule"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("SEKUNDE"));
      return {};

  - platform: template
    name: "STUNDE"
    id: STUNDE
    icon: "mdi:schedule"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("STUNDE"));
      return {};

  - platform: template
    name: "TAG"
    id: TAG
    icon: "mdi:calendar_month"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("TAG"));
      return {};

  - platform: template
    name: "WP_STATUS"
    id: WP_STATUS
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("WP_STATUS"));
      return {};

  - platform: template
    name: "EVU_SPERRE_AKTIV_MANAGER"
    id: EVU_SPERRE_AKTIV_MANAGER
    icon: "mdi:dip-switch"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EVU_SPERRE_AKTIV"));
      return {};

#########################################
#                                       #
#   HEIZMODUL SENSORS                   #
#                                       #
#########################################
  - platform: template
    name: "VERDAMPFERTEMP"
    id: VERDAMPFERTEMP
    unit_of_measurement: "°C"
    icon: "mdi:kettle-steam-outline"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("VERDAMPFERTEMP"));
      return {};
     
  - platform: template
    name: "RUECKLAUFISTTEMP"
    id: RUECKLAUFISTTEMP
    unit_of_measurement: "°C"
    icon: "mdi:waves-arrow-left"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("RUECKLAUFISTTEMP"));
      return {};
     
  - platform: template
    name: "VERDICHTER_HEIZMODUL"
    id: VERDICHTER_HEIZMODUL
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("VERDICHTER"));
      return {};
     
  - platform: template
    name: "WPVORLAUFIST"
    id: WPVORLAUFIST
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WPVORLAUFIST"));
      return {};
     
  - platform: template
    name: "ABTAUUNGAKTIV"
    id: ABTAUUNGAKTIV
    icon: "mdi:description"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("AUSSENTEMP"));
      return {};
     
  - platform: template
    name: "BETRIEBSART_WP"
    id: BETRIEBSART_WP
    icon: "mdi:dip-switch"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("BETRIEBSART_WP"));
      return {};

  - platform: template
    name: "EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH"
    id: EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH"));
      return {};
     
  - platform: template
    name: "EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH"
    id: EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH
    unit_of_measurement: Wh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH"));
      return {};
     
  - platform: template
    name: "EL_AUFNAHMELEISTUNG_WW_SUM_KWH"
    id: EL_AUFNAHMELEISTUNG_WW_SUM_KWH
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_WW_SUM_KWH"));
      return {};
     
  - platform: template
    name: "EL_AUFNAHMELEISTUNG_WW_TAG_WH"
    id: EL_AUFNAHMELEISTUNG_WW_TAG_WH
    unit_of_measurement: Wh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_WW_TAG_WH"));
      return {};

  - platform: template
    name: "FATAL_ERROR"
    id: FATAL_ERROR
    icon: "mdi:alert-circle"
    accuracy_decimals: 0

  - platform: template
    name: "FEHLER_PARAMETERSATZ_IWS"
    id: FEHLER_PARAMETERSATZ_IWS
    icon: "mdi:alert-circle"
    accuracy_decimals: 0

  - platform: template
    name: "FEHLERMELDUNG"
    id: FEHLERMELDUNG
    icon: "mdi:alert-circle"
    accuracy_decimals: 0

  - platform: template
    name: "HARDWARE_NUMMER_HEIZMODUL"
    id: HARDWARE_NUMMER_HEIZMODUL
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "INDEX_NOT_FOUND_HEIZMODUL"
    id: INDEX_NOT_FOUND_HEIZMODUL
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "INITIALISIERUNG_HEIZMODUL"
    id: INITIALISIERUNG_HEIZMODUL
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "K_OS_RMX_RESERVE_INFO3"
    id: K_OS_RMX_RESERVE_INFO3
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "LZ_VERD_1_2_WW_BETRIEB_HEIZMODUL"
    id: LZ_VERD_1_2_WW_BETRIEB_HEIZMODUL
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_2_WW_BETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_1_WW_BETRIEB_HEIZMODUL"
    id: LZ_VERD_1_WW_BETRIEB_HEIZMODUL
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_WW_BETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_2_WW_BETRIEB_HEIZMODUL"
    id: LZ_VERD_2_WW_BETRIEB_HEIZMODUL
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_2_WW_BETRIEB"));
      return {};
     
  - platform: template
    name: "PARAMETERSATZ_HEIZMODUL"
    id: PARAMETERSATZ_HEIZMODUL
    icon: "mdi:alert-circle"
    accuracy_decimals: 0

  - platform: template
    name: "SCHALTFKT_IWS"
    id: SCHALTFKT_IWS
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "SOFTWARE_NUMMER_HEIZMODUL"
    id: SOFTWARE_NUMMER_HEIZMODUL
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "SOLAR_KOLLEKTOR_3_I_ANTEIL"
    id: SOLAR_KOLLEKTOR_3_I_ANTEIL
    icon: "mdi:solar-power-variant"
    accuracy_decimals: 0

  - platform: template
    name: "SPEICHER_STATUS"
    id: SPEICHER_STATUS
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "STUETZSTELLE_HD1"
    id: STUETZSTELLE_HD1
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "STUETZSTELLE_HD2"
    id: STUETZSTELLE_HD2
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "STUETZSTELLE_ND1"
    id: STUETZSTELLE_ND1
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "STUETZSTELLE_ND2"
    id: STUETZSTELLE_ND2
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "WAERMEERTRAG_2WE_HEIZ_SUM_KWH"
    id: WAERMEERTRAG_2WE_HEIZ_SUM_KWH
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_2WE_HEIZ_SUM_KWH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_2WE_WW_SUM_KWH"
    id: WAERMEERTRAG_2WE_WW_SUM_KWH
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:water-boiler"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_2WE_WW_SUM_KWH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_HEIZ_SUM_KWH"
    id: WAERMEERTRAG_HEIZ_SUM_KWH
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_HEIZ_SUM_KWH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_HEIZ_TAG_WH"
    id: WAERMEERTRAG_HEIZ_TAG_WH
    unit_of_measurement: Wh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_HEIZ_TAG_WH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_WW_SUM_KWH"
    id: WAERMEERTRAG_WW_SUM_KWH
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:water-boiler"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_WW_SUM_KWH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_WW_TAG_WH"
    id: WAERMEERTRAG_WW_TAG_WH
    unit_of_measurement: Wh
    device_class: energy
    icon: "mdi:water-boiler"
    accuracy_decimals: 0
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_WW_TAG_WH"));
      return {};
     
  - platform: template
    name: "EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH"
    id: EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH"));
      return {};
     
  - platform: template
    name: "EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH"
    id: EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH"));
      return {};
     
  - platform: template
    name: "EL_AUFNAHMELEISTUNG_WW_SUM_MWH"
    id: EL_AUFNAHMELEISTUNG_WW_SUM_MWH
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_WW_SUM_MWH"));
      return {};
     
  - platform: template
    name: "EL_AUFNAHMELEISTUNG_WW_TAG_KWH"
    id: EL_AUFNAHMELEISTUNG_WW_TAG_KWH
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_WW_TAG_KWH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_2WE_HEIZ_SUM_MWH"
    id: WAERMEERTRAG_2WE_HEIZ_SUM_MWH
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_2WE_HEIZ_SUM_MWH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_2WE_WW_SUM_MWH"
    id: WAERMEERTRAG_2WE_WW_SUM_MWH
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:water-boiler"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_2WE_WW_SUM_MWH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_HEIZ_SUM_MWH"
    id: WAERMEERTRAG_HEIZ_SUM_MWH
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_HEIZ_SUM_MWH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_HEIZ_TAG_KWH"
    id: WAERMEERTRAG_HEIZ_TAG_KWH
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_HEIZ_TAG_KWH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_WW_SUM_MWH"
    id: WAERMEERTRAG_WW_SUM_MWH
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:water-boiler"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_WW_SUM_MWH"));
      return {};
     
  - platform: template
    name: "WAERMEERTRAG_WW_TAG_KWH"
    id: WAERMEERTRAG_WW_TAG_KWH
    unit_of_measurement: KWh
    device_class: energy
    icon: "mdi:water-boiler"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_WW_TAG_KWH"));
      return {};
     
  - platform: template
    name: "LZ_VERD_1_2_HEIZBETRIEB_HEIZMODUL"
    id: LZ_VERD_1_2_HEIZBETRIEB_HEIZMODUL
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_2_HEIZBETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_1_2_KUEHLBETRIEB_HEIZMODUL"
    id: LZ_VERD_1_2_KUEHLBETRIEB_HEIZMODUL
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_2_KUEHLBETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_1_HEIZBETRIEB_HEIZMODUL"
    id: LZ_VERD_1_HEIZBETRIEB_HEIZMODUL
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_HEIZBETRIEB"));
      return {};

  - platform: template
    name: "LZ_VERD_1_KUEHLBETRIEB_HEIZMODUL"
    id: LZ_VERD_1_KUEHLBETRIEB_HEIZMODUL
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_KUEHLBETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_2_HEIZBETRIEB_HEIZMODUL"
    id: LZ_VERD_2_HEIZBETRIEB_HEIZMODUL
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_2_HEIZBETRIEB"));
      return {};
     
  - platform: template
    name: "LZ_VERD_2_KUEHLBETRIEB_HEIZMODUL"
    id: LZ_VERD_2_KUEHLBETRIEB_HEIZMODUL
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 10min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_2_KUEHLBETRIEB"));
      return {};

#########################################
#                                       #
#   BERECHNETE SENSOREN                 #
#                                       #
#########################################
  - platform: template
    name: "EL_AUFNAHMELEISTUNG_HEIZ_SUM"
    id: EL_AUFNAHMELEISTUNG_HEIZ_SUM
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 3
    state_class: "total_increasing"

  - platform: template
    name: "EL_AUFNAHMELEISTUNG_WW_SUM"
    id: EL_AUFNAHMELEISTUNG_WW_SUM
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 3
    state_class: "total_increasing"

  - platform: template
    name: "EL_AUFNAHMELEISTUNG_HEIZ_INCREASING"
    id: EL_AUFNAHMELEISTUNG_HEIZ_INCREASING
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 3
    state_class: "total_increasing"

  - platform: template
    name: "EL_AUFNAHMELEISTUNG_WW_INCREASING"
    id: EL_AUFNAHMELEISTUNG_WW_INCREASING
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 3
    state_class: "total_increasing"

  - platform: template
    name: "EL_AUFNAHMELEISTUNG_HEIZ_TAG"
    id: EL_AUFNAHMELEISTUNG_HEIZ_TAG
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 3

  - platform: template
    name: "EL_AUFNAHMELEISTUNG_WW_TAG"
    id: EL_AUFNAHMELEISTUNG_WW_TAG
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:transmission-tower"
    accuracy_decimals: 3

  - platform: template
    name: "WAERMEERTRAG_2WE_HEIZ_SUM"
    id: WAERMEERTRAG_2WE_HEIZ_SUM
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 3
    state_class: "total_increasing"

  - platform: template
    name: "WAERMEERTRAG_2WE_WW_SUM"
    id: WAERMEERTRAG_2WE_WW_SUM
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:water-boiler"
    accuracy_decimals: 3
    state_class: "total_increasing"

  - platform: template
    name: "WAERMEERTRAG_HEIZ_SUM"
    id: WAERMEERTRAG_HEIZ_SUM
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 3
    state_class: "total_increasing"

  - platform: template
    name: "WAERMEERTRAG_HEIZ_INCREASING"
    id: WAERMEERTRAG_HEIZ_INCREASING
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 3
    state_class: "total_increasing"

  - platform: template
    name: "WAERMEERTRAG_HEIZ_TAG"
    id: WAERMEERTRAG_HEIZ_TAG
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 3

  - platform: template
    name: "WAERMEERTRAG_WW_SUM"
    id: WAERMEERTRAG_WW_SUM
    unit_of_measurement: MWh
    device_class: energy
    icon: "mdi:water-boiler"
    accuracy_decimals: 3
    state_class: "total_increasing"

  - platform: template
    name: "WAERMEERTRAG_WW_INCREASING"
    id: WAERMEERTRAG_WW_INCREASING
    unit_of_measurement: kWh
    device_class: energy
    icon: "mdi:heating-coil"
    accuracy_decimals: 3
    state_class: "total_increasing"

  - platform: template
    name: "WAERMEERTRAG_WW_TAG"
    id: WAERMEERTRAG_WW_TAG
    unit_of_measurement: KWh
    device_class: energy
    icon: "mdi:water-boiler"
    accuracy_decimals: 3

  - platform: template
    name: "COP_WW"
    id: COP_WW
    icon: "mdi:chart-bell-curve-cumulative"
    device_class: "power_factor"
    state_class: "measurement"
    accuracy_decimals: 2

  - platform: template
    name: "COP_HEIZ"
    id: COP_HEIZ
    icon: "mdi:chart-bell-curve-cumulative"
    device_class: "power_factor"
    state_class: "measurement"
    accuracy_decimals: 2

  - platform: template
    name: "COP_GESAMT"
    id: COP_GESAMT
    icon: "mdi:chart-bell-curve-cumulative"
    device_class: "power_factor"
    state_class: "measurement"
    accuracy_decimals: 2

#########################################
#                                       #
#   Other Sensors                       #
#                                       #
#########################################
  - platform: wifi_signal
    name: "WiFi Signal dBm"
    icon: "mdi:wifi" 
    update_interval: 60s
    id: wifi_dbm
    
  - platform: template
    name: "WiFi Signal"
    icon: "mdi:signal"
    unit_of_measurement: "%"
    update_interval: 60s
    id: wifi_percentage
    lambda: |-
      float dBm = id(wifi_dbm).state;
      float MIN_DBM = -100.0; // Minimum RSSI in dBm
      float MAX_DBM = -30.0; // Maximum RSSI in dBm
      if (dBm < MIN_DBM) dBm = MIN_DBM;
      if (dBm > MAX_DBM) dBm = MAX_DBM;
      return ((dBm - MIN_DBM) / (MAX_DBM - MIN_DBM)) * 100;

#########################################
#                                       #
#   TEXT SENSOREN                       #
#                                       #
#########################################
text_sensor:

#########################################
#                                       #
#   HOME ASSISTANT TEXT SENSOREN        #
#                                       #
#########################################
  - platform: homeassistant
    name: "Wärmepumpe Datum Setpoint"
    id: warmepumpe_datum
    entity_id: input_datetime.warmepumpe_datum

  - platform: homeassistant
    name: "Wärmepumpe Uhrzeit Setpoint"
    id: warmepumpe_uhrzeit
    entity_id: input_datetime.warmepumpe_uhrzeit

  - platform: homeassistant
    name: "EINSTELL_SPEICHERSOLLTEMP_SET"
    id: EINSTELL_SPEICHERSOLLTEMP_SET
    entity_id: input_number.speichersolltemp_set
    on_value:
      then:
        lambda: |-
          if(atoi(x.c_str()) != 20) {
            char temp[3];
            strncpy(temp, x.c_str(), sizeof(temp)-1);
            temp[2] ='\0';
            const char* ctemp = temp;
            writeSignal(&CanMembers[cm_manager], GetElsterIndex("EINSTELL_SPEICHERSOLLTEMP"), ctemp);
            id(EINSTELL_SPEICHERSOLLTEMP).update();
            id(SPEICHERISTTEMP).update();
            id(SPEICHERSOLLTEMP).update();

          }
          return;

  - platform: homeassistant
    name: "EINSTELL_SPEICHERSOLLTEMP2_SET"
    id: EINSTELL_SPEICHERSOLLTEMP2_SET
    entity_id: input_number.speichersolltemp2_set
    on_value:
      then:
        lambda: |-
          if(atoi(x.c_str()) != 20) {
            char temp[3];
            strncpy(temp, x.c_str(), sizeof(temp)-1);
            temp[2] ='\0';
            const char* ctemp = temp;
            writeSignal(&CanMembers[cm_manager], GetElsterIndex("EINSTELL_SPEICHERSOLLTEMP2"), ctemp);
            id(EINSTELL_SPEICHERSOLLTEMP2).update();
            id(SPEICHERISTTEMP).update();
            id(SPEICHERSOLLTEMP).update();
          }
          return;


#########################################
#                                       #
#   MANAGER TEXT SENSORS                #
#                                       #
#########################################
  - platform: template
    name: "GERAETE_ID_MANAGER"
    id: GERAETE_ID_MANAGER
    icon: "mdi:description"

  - platform: template
    name: "PROGRAMMSCHALTER"
    id: PROGRAMMSCHALTER
    icon: "mdi:switch"
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("PROGRAMMSCHALTER"));
      return {};

  - platform: template
    name: "SOMMERBETRIEB"
    id: SOMMERBETRIEB
    icon: "mdi:weather-sunny"
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("SOMMERBETRIEB"));
      return {};

  - platform: template
    name: "WW_ECO"
    id: WW_ECO
    icon: "mdi:leaf-circle-outline"
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("WW_ECO"));
      return {};

#########################################
#                                       #
#   HEIZMODUL TEXT SENSORS             #
#                                       #
#########################################
  - platform: template
    name: "GERAETE_ID_HEIZMODUL"
    id: GERAETE_ID_HEIZMODUL
    icon: "mdi:description"

#########################################
#                                       #
#   BERECHNETE TEXT SENSORS            #
#                                       #
#########################################
  - platform: template
    name: "DATUM"
    id: DATUM
    icon: "mdi:calendar"

  - platform: template
    name: "ZEIT"
    id: ZEIT
    icon: "mdi:clock"

#########################################
#                                       #
#   BUTTON                              #
#                                       #
#########################################
button:

  - platform: template
    name: "Update Uhrzeit"
    id: update_uhrzeit
    on_press:
      then:      
        lambda: |-
          ESP_LOGI("WRITE UHRZEIT VIA BUTTON", "%s", id(warmepumpe_datum).state.c_str());

          char stunde[3];
          char minute[3];
          char sekunde[3];

          strncpy(stunde, id(warmepumpe_uhrzeit).state.c_str(), sizeof(stunde)-1);
          stunde[2] ='\0';
          strncpy(minute, id(warmepumpe_uhrzeit).state.c_str()+3, sizeof(minute)-1);
          minute[2] ='\0';
          strncpy(sekunde, id(warmepumpe_uhrzeit).state.c_str()+6, sizeof(sekunde)-1);
          sekunde[2] ='\0';
          const char* cstunde = stunde;
          const char* cminute = minute;
          const char* csekunde = sekunde;
          ESP_LOGI("WRITE", "Stunde: %s, Minute: %s, Sekunde: %s", cstunde, cminute, csekunde);
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("STUNDE"), cstunde);
          id(STUNDE).update();
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("MINUTE"), cminute);
          id(MINUTE).update();
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("SEKUNDE"), csekunde);
          id(SEKUNDE).update();

  - platform: template
    name: "Update Datum"
    id: update_datum
    on_press:
      then:      
        lambda: |-
          ESP_LOGI("WRITE DATUM VIA BUTTON", "%s", id(warmepumpe_datum).state.c_str());
          char year[3];
          char month[3];
          char day[3];

          strncpy(year, id(warmepumpe_datum).state.c_str()+2, sizeof(year)-1);
          year[2] ='\0';
          strncpy(month, id(warmepumpe_datum).state.c_str()+5, sizeof(month)-1);
          month[2] ='\0';
          strncpy(day, id(warmepumpe_datum).state.c_str()+8, sizeof(day)-1);
          day[2] ='\0';

          const char* cyear = year;
          const char* cmonth = month;
          const char* cday = day;
          ESP_LOGI("WRITE", "Year: %s, Month: %s, Day: %s", cyear, cmonth, cday);
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("JAHR"), cyear);
          id(JAHR).update();
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("MONAT"), cmonth);
          id(MONAT).update();
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("TAG"), cday);
          id(TAG).update();


#########################################
#                                       #
#   SPI Konfiguration                   #
#                                       #
#########################################
spi:
  id: McpSpi
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

#########################################
#                                       #
#   canbus Konfiguration                #
#                                       #
#########################################
canbus:
  - platform: mcp2515
    id: my_mcp2515
    spi_id: McpSpi
    cs_pin: GPIO5
    can_id: 700
    use_extended_id: false
    bit_rate: 20kbps
    on_frame:

#########################################
#                                       #
#   KESSEL Nachrichten                  #
#                                       #
#########################################
    - can_id: 0x180
      then:
        - lambda: |-
            unsigned short canId = 180;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

            if(ei->Name == "AUSSENTEMP") {
              id(AUSSENTEMP).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "BUSKONTROLLE") {
              id(BUSKONTROLLE).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "EINSTELL_SPEICHERSOLLTEMP") {
              id(EINSTELL_SPEICHERSOLLTEMP).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "EINSTELL_SPEICHERSOLLTEMP2") {
              id(EINSTELL_SPEICHERSOLLTEMP2).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "HILFSKESSELSOLL") {
              id(HILFSKESSELSOLL).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "INITIALISIERUNG") {
              id(INITIALISIERUNG_KESSEL).publish_state(std::stoi(value));
              return;
            }          
            if(ei->Name == "KESSELSOLLTEMP") {
              id(KESSELSOLLTEMP).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "RUECKLAUFISTTEMP") {
              id(RUECKLAUFISTTEMP_KESSEL).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "SPEICHERISTTEMP") {
              id(SPEICHERISTTEMP).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "SPEICHERSOLLTEMP") {
              id(SPEICHERSOLLTEMP).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "VORLAUFSOLLTEMP") {
              id(VORLAUFSOLLTEMP).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "WPVORLAUFIST") {
              id(WPVORLAUFIST_KESSEL).publish_state(std::stof(value));
              return;
            }            

#########################################
#                                       #
#   MANAGER Nachrichten                 #
#                                       #
#########################################
    - can_id: 0x480
      then:
        - lambda: |-
            unsigned short canId = 480;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

            if(ei->Name == "ACCESS_EEPROM") {
              id(ACCESS_EEPROM).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "ANFAHRENT") {
              id(ANFAHRENT).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "GERAETEKONFIGURATION") {
              id(GERAETEKONFIGURATION).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "GERAETE_ID") {
              id(GERAETE_ID_MANAGER).publish_state(value);
              return;
            }
            if(ei->Name == "HARDWARE_NUMMER") {
              id(HARDWARE_NUMMER_MANAGER).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "INDEX_NOT_FOUND") {
              id(INDEX_NOT_FOUND_MANAGER).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "INITIALISIERUNG") {
              id(INITIALISIERUNG_MANAGER).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "JAHR") {
              id(JAHR).publish_state(std::stoi(value));
              publishDate();
              return; 
            }
            if(ei->Name == "LAUFZEIT_VERD_BEI_SPEICHERBEDARF") {
              id(LAUFZEIT_VERD_BEI_SPEICHERBEDARF).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "LUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER") {
              id(LUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_2_HEIZBETRIEB") {
              id(LZ_VERD_1_2_HEIZBETRIEB_MANAGER).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_2_KUEHLBETRIEB") {
              id(LZ_VERD_1_2_KUEHLBETRIEB_MANAGER).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_2_WW_BETRIEB") {
              id(LZ_VERD_1_2_WW_BETRIEB_MANAGER).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_HEIZBETRIEB") {
              id(LZ_VERD_1_HEIZBETRIEB_MANAGER).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_KUEHLBETRIEB") {
              id(LZ_VERD_1_KUEHLBETRIEB_MANAGER).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_WW_BETRIEB") {
              id(LZ_VERD_1_WW_BETRIEB_MANAGER).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "LZ_VERD_2_HEIZBETRIEB") {
              id(LZ_VERD_2_HEIZBETRIEB_MANAGER).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_2_KUEHLBETRIEB") {
              id(LZ_VERD_2_KUEHLBETRIEB_MANAGER).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_2_WW_BETRIEB") {
              id(LZ_VERD_2_WW_BETRIEB_MANAGER).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "MINUTE") {
              id(MINUTE).publish_state(std::stoi(value));
              publishTime();
              return;
            }
            if(ei->Name == "MONAT") {
              id(MONAT).publish_state(std::stoi(value));
              publishDate();
              return;
            }
            if(ei->Name == "PARAMETERSATZ") {
              id(PARAMETERSATZ_MANAGER).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "PROGRAMMSCHALTER") {
              id(PROGRAMMSCHALTER).publish_state(value);
              return;
            }
            if(ei->Name == "QUELLENPUMPEN_STATUS") {
              id(QUELLENPUMPEN_STATUS).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "RAUMISTTEMP") {
              id(RAUMISTTEMP).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "RAUMSOLLTEMP_I") {
              id(RAUMSOLLTEMP_I).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "RAUMSOLLTEMP_II") {
              id(RAUMSOLLTEMP_II).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "RAUMSOLLTEMP_III") {
              id(RAUMSOLLTEMP_III).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "RAUMSOLLTEMP_NACHT") {
              id(RAUMSOLLTEMP_NACHT).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "RUECKLAUFISTTEMP") {
              id(RUECKLAUFISTTEMP_MANAGER).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "SAMMEL_RELAISSTATUS") {
              id(SAMMEL_RELAISSTATUS).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "SEKUNDE") {
              id(SEKUNDE).publish_state(std::stoi(value));
              publishTime();
              return;
            }
            if(ei->Name == "SOFTWARE_NUMMER") {
              id(SOFTWARE_NUMMER_MANAGER).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "SOFTWARE_VERSION") {
              id(SOFTWARE_VERSION).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "SOMMERBETRIEB") {
              id(SOMMERBETRIEB).publish_state(value);
              return;
            }
            if(ei->Name == "SPEICHERBEDARF") {
              id(SPEICHERBEDARF).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "STUNDE") {
              id(STUNDE).publish_state(std::stoi(value));
              publishTime();
              return;
            }
            if(ei->Name == "TAG") {
              id(TAG).publish_state(std::stoi(value));
              publishDate();
              return;
            }
            if(ei->Name == "TEILVORRANG_WW") {
              id(TEILVORRANG_WW).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "TEMPORALE_LUEFTUNGSSTUFE_DAUER") {
              id(TEMPORALE_LUEFTUNGSSTUFE_DAUER).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "VERDICHTER") {
              id(VERDICHTER_MANAGER).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "VERSTELLTE_RAUMSOLLTEMP") {
              id(VERSTELLTE_RAUMSOLLTEMP).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "WP_STATUS") {
              id(WP_STATUS).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "WPVORLAUFIST") {
              id(WPVORLAUFIST_MANAGER).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "WW_ECO") {
              id(WW_ECO).publish_state(value);
              return;
            }
            if(ei->Name == "ZWISCHENEINSPRITZUNG_ISTTEMP") {
              id(ZWISCHENEINSPRITZUNG_ISTTEMP).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "EVU_SPERRE_AKTIV") {
              id(EVU_SPERRE_AKTIV_MANAGER).publish_state(std::stoi(value));
              return;
            }

#########################################
#                                       #
#   HEIZMODUL Nachrichten               #
#                                       #
#########################################
    - can_id: 0x500
      then:
        - lambda: |-
            unsigned short canId = 500;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

            if(ei->Name == "VERDAMPFERTEMP") {
              id(VERDAMPFERTEMP).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "INITIALISIERUNG") {
              id(INITIALISIERUNG_HEIZMODUL).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "SPEICHER_STATUS") {
              id(SPEICHER_STATUS).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "RUECKLAUFISTTEMP") {
              id(RUECKLAUFISTTEMP).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "VERDICHTER") {
              id(VERDICHTER_HEIZMODUL).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "WPVORLAUFIST") {
              id(WPVORLAUFIST).publish_state(std::stof(value));
              return;
            }
            if(ei->Name == "ABTAUUNGAKTIV") {
              id(ABTAUUNGAKTIV).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "BETRIEBSART_WP") {
              id(ABTAUUNGAKTIV).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH") {
              id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH).publish_state(std::stoi(value));
              id(EL_AUFNAHMELEISTUNG_HEIZ_SUM).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH).state + id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH).state / 1000 );
              update_COP_HEIZ();
              update_COP_GESAMT();
              return;
            }
            if(ei->Name == "EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH") {
              id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH).publish_state(std::stoi(value));
              id(EL_AUFNAHMELEISTUNG_HEIZ_TAG).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH).state / 1000);
              id(EL_AUFNAHMELEISTUNG_HEIZ_INCREASING).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH).state / 1000);
              return;
            }
            if(ei->Name == "EL_AUFNAHMELEISTUNG_WW_SUM_KWH") {
              id(EL_AUFNAHMELEISTUNG_WW_SUM_KWH).publish_state(std::stoi(value));
              id(EL_AUFNAHMELEISTUNG_WW_SUM).publish_state(id(EL_AUFNAHMELEISTUNG_WW_SUM_MWH).state + id(EL_AUFNAHMELEISTUNG_WW_SUM_KWH).state / 1000);
              update_COP_WW();
              update_COP_GESAMT();
              return;
            }
            if(ei->Name == "EL_AUFNAHMELEISTUNG_WW_TAG_WH") {
              id(EL_AUFNAHMELEISTUNG_WW_TAG_WH).publish_state(std::stoi(value));
              id(EL_AUFNAHMELEISTUNG_WW_TAG).publish_state(id(EL_AUFNAHMELEISTUNG_WW_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_WW_TAG_WH).state / 1000);
              id(EL_AUFNAHMELEISTUNG_WW_INCREASING).publish_state(id(EL_AUFNAHMELEISTUNG_WW_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_WW_TAG_WH).state / 1000);
           
              return;
            }
            if(ei->Name == "FATAL_ERROR") {
              id(FATAL_ERROR).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "FEHLER_PARAMETERSATZ_IWS") {
              id(FEHLER_PARAMETERSATZ_IWS).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "FEHLERMELDUNG") {
              id(FEHLERMELDUNG).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "HARDWARE_NUMMER") {
              id(HARDWARE_NUMMER_HEIZMODUL).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "INDEX_NOT_FOUND") {
              id(INDEX_NOT_FOUND_HEIZMODUL).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "K_OS_RMX_RESERVE_INFO3") {
              id(K_OS_RMX_RESERVE_INFO3).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_2_WW_BETRIEB") {
              id(LZ_VERD_1_2_WW_BETRIEB_HEIZMODUL).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_WW_BETRIEB") {
              id(LZ_VERD_1_WW_BETRIEB_HEIZMODUL).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "LZ_VERD_2_WW_BETRIEB") {
              id(LZ_VERD_2_WW_BETRIEB_HEIZMODUL).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "PARAMETERSATZ") {
              id(PARAMETERSATZ_HEIZMODUL).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "SCHALTFKT_IWS") {
              id(SCHALTFKT_IWS).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "SOFTWARE_NUMMER") {
              id(SOFTWARE_NUMMER_HEIZMODUL).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "SOLAR_KOLLEKTOR_3_I_ANTEIL") {
              id(SOLAR_KOLLEKTOR_3_I_ANTEIL).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "STUETZSTELLE_HD1") {
              id(STUETZSTELLE_HD1).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "STUETZSTELLE_HD2") {
              id(STUETZSTELLE_HD2).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "STUETZSTELLE_ND1") {
              id(STUETZSTELLE_ND1).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "STUETZSTELLE_ND2") {
              id(STUETZSTELLE_ND2).publish_state(std::stoi(value));
              return;
            }
            if(ei->Name == "WAERMEERTRAG_2WE_HEIZ_SUM_KWH") {
              id(WAERMEERTRAG_2WE_HEIZ_SUM_KWH).publish_state(std::stoi(value));
              id(WAERMEERTRAG_2WE_HEIZ_SUM).publish_state(id(WAERMEERTRAG_2WE_HEIZ_SUM_MWH).state+id(WAERMEERTRAG_2WE_HEIZ_SUM_KWH).state/1000);           
              return;
            }
            if(ei->Name == "WAERMEERTRAG_2WE_WW_SUM_KWH") {
              id(WAERMEERTRAG_2WE_WW_SUM_KWH).publish_state(std::stoi(value));
              id(WAERMEERTRAG_2WE_WW_SUM).publish_state(id(WAERMEERTRAG_2WE_WW_SUM_MWH).state+id(WAERMEERTRAG_2WE_WW_SUM_KWH).state/1000);           
              return;
            }
            if(ei->Name == "WAERMEERTRAG_HEIZ_SUM_KWH") {
              id(WAERMEERTRAG_HEIZ_SUM_KWH).publish_state(std::stoi(value));
              id(WAERMEERTRAG_HEIZ_SUM).publish_state(id(WAERMEERTRAG_HEIZ_SUM_MWH).state+id(WAERMEERTRAG_HEIZ_SUM_KWH).state/1000);
              update_COP_HEIZ();
              update_COP_GESAMT();
              return;
            }
            if(ei->Name == "WAERMEERTRAG_HEIZ_TAG_WH") {
              id(WAERMEERTRAG_HEIZ_TAG_WH).publish_state(std::stoi(value));
              id(WAERMEERTRAG_HEIZ_TAG).publish_state(id(WAERMEERTRAG_HEIZ_TAG_KWH).state+id(WAERMEERTRAG_HEIZ_TAG_WH).state/1000);      
              id(WAERMEERTRAG_HEIZ_INCREASING).publish_state(id(WAERMEERTRAG_HEIZ_TAG_KWH).state+id(WAERMEERTRAG_HEIZ_TAG_WH).state/1000);           
     
              return;
            }
            if(ei->Name == "WAERMEERTRAG_WW_SUM_KWH") {
              id(WAERMEERTRAG_WW_SUM_KWH).publish_state(std::stoi(value));
              id(WAERMEERTRAG_WW_SUM).publish_state(id(WAERMEERTRAG_WW_SUM_MWH).state+id(WAERMEERTRAG_WW_SUM_KWH).state/1000);
              update_COP_WW();
              update_COP_GESAMT();
              return;
            }
            if(ei->Name == "WAERMEERTRAG_WW_TAG_WH") {
              id(WAERMEERTRAG_WW_TAG_WH).publish_state(std::stoi(value));
              id(WAERMEERTRAG_WW_TAG).publish_state(id(WAERMEERTRAG_WW_TAG_KWH).state+id(WAERMEERTRAG_WW_TAG_WH).state/1000);
              id(WAERMEERTRAG_WW_INCREASING).publish_state(id(WAERMEERTRAG_WW_TAG_KWH).state+id(WAERMEERTRAG_WW_TAG_WH).state/1000);           
           
              return;
            }
            if(ei->Name == "EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH") {
              id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH).publish_state(std::stod(value));
              id(EL_AUFNAHMELEISTUNG_HEIZ_SUM).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH).state+id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH).state/1000);
              update_COP_HEIZ();
              update_COP_GESAMT();
              return;
            }
            if(ei->Name == "EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH") {
              id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH).publish_state(std::stod(value));
              id(EL_AUFNAHMELEISTUNG_HEIZ_TAG).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH).state+id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH).state/1000);      
              id(EL_AUFNAHMELEISTUNG_HEIZ_INCREASING).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH).state / 1000);
              return;
            }
            if(ei->Name == "EL_AUFNAHMELEISTUNG_WW_SUM_MWH") {
              id(EL_AUFNAHMELEISTUNG_WW_SUM_MWH).publish_state(std::stod(value));
              id(EL_AUFNAHMELEISTUNG_WW_SUM).publish_state(id(EL_AUFNAHMELEISTUNG_WW_SUM_MWH).state+id(EL_AUFNAHMELEISTUNG_WW_SUM_KWH).state/1000);
              update_COP_WW();
              update_COP_GESAMT();
              return;
            }
            if(ei->Name == "EL_AUFNAHMELEISTUNG_WW_TAG_KWH") {
              id(EL_AUFNAHMELEISTUNG_WW_TAG_KWH).publish_state(std::stod(value));
              id(EL_AUFNAHMELEISTUNG_WW_TAG).publish_state(id(EL_AUFNAHMELEISTUNG_WW_TAG_KWH).state+id(EL_AUFNAHMELEISTUNG_WW_TAG_WH).state/1000);      
              id(EL_AUFNAHMELEISTUNG_WW_INCREASING).publish_state(id(EL_AUFNAHMELEISTUNG_WW_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_WW_TAG_WH).state / 1000);
              return;
            }
            if(ei->Name == "WAERMEERTRAG_2WE_HEIZ_SUM_MWH") {
              id(WAERMEERTRAG_2WE_HEIZ_SUM_MWH).publish_state(std::stod(value));
              id(WAERMEERTRAG_2WE_HEIZ_SUM).publish_state(id(WAERMEERTRAG_2WE_HEIZ_SUM_MWH).state+id(WAERMEERTRAG_2WE_HEIZ_SUM_KWH).state/1000);           
              return;
            }
            if(ei->Name == "WAERMEERTRAG_2WE_WW_SUM_MWH") {
              id(WAERMEERTRAG_2WE_WW_SUM_MWH).publish_state(std::stod(value));
              id(WAERMEERTRAG_2WE_WW_SUM).publish_state(id(WAERMEERTRAG_2WE_WW_SUM_MWH).state+id(WAERMEERTRAG_2WE_WW_SUM_KWH).state/1000);           
              return;
            }
            if(ei->Name == "WAERMEERTRAG_HEIZ_SUM_MWH") {
              id(WAERMEERTRAG_HEIZ_SUM_MWH).publish_state(std::stod(value));
              id(WAERMEERTRAG_HEIZ_SUM).publish_state(id(WAERMEERTRAG_HEIZ_SUM_MWH).state+id(WAERMEERTRAG_HEIZ_SUM_KWH).state/1000);
              update_COP_HEIZ();
              update_COP_GESAMT();
              return;
            }
            if(ei->Name == "WAERMEERTRAG_HEIZ_TAG_KWH") {
              id(WAERMEERTRAG_HEIZ_TAG_KWH).publish_state(std::stod(value));
              id(WAERMEERTRAG_HEIZ_TAG).publish_state(id(WAERMEERTRAG_HEIZ_TAG_KWH).state+id(WAERMEERTRAG_HEIZ_TAG_WH).state/1000);
              id(WAERMEERTRAG_HEIZ_INCREASING).publish_state(id(WAERMEERTRAG_HEIZ_TAG_KWH).state+id(WAERMEERTRAG_HEIZ_TAG_WH).state/1000);           
           
              return;
            }
            if(ei->Name == "WAERMEERTRAG_WW_SUM_MWH") {
              id(WAERMEERTRAG_WW_SUM_MWH).publish_state(std::stod(value));
              id(WAERMEERTRAG_WW_SUM).publish_state(id(WAERMEERTRAG_WW_SUM_MWH).state+id(WAERMEERTRAG_WW_SUM_KWH).state/1000);           
              return;
            }
            if(ei->Name == "WAERMEERTRAG_WW_TAG_KWH") {
              id(WAERMEERTRAG_WW_TAG_KWH).publish_state(std::stod(value));
              id(WAERMEERTRAG_WW_TAG).publish_state(id(WAERMEERTRAG_WW_TAG_KWH).state+id(WAERMEERTRAG_WW_TAG_WH).state/1000);           
              id(WAERMEERTRAG_WW_INCREASING).publish_state(id(WAERMEERTRAG_WW_TAG_KWH).state+id(WAERMEERTRAG_WW_TAG_WH).state/1000);           

              return;
            }
            if(ei->Name == "LZ_VERD_1_2_HEIZBETRIEB") {
              id(LZ_VERD_1_2_HEIZBETRIEB_HEIZMODUL).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_2_KUEHLBETRIEB") {
              id(LZ_VERD_1_2_KUEHLBETRIEB_HEIZMODUL).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_HEIZBETRIEB") {
              id(LZ_VERD_1_HEIZBETRIEB_HEIZMODUL).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_1_KUEHLBETRIEB") {
              id(LZ_VERD_1_KUEHLBETRIEB_HEIZMODUL).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_2_HEIZBETRIEB") {
              id(LZ_VERD_2_HEIZBETRIEB_HEIZMODUL).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "LZ_VERD_2_KUEHLBETRIEB") {
              id(LZ_VERD_2_KUEHLBETRIEB_HEIZMODUL).publish_state(std::stod(value));
              return;
            }
            if(ei->Name == "GERAETE_ID") {
              id(GERAETE_ID_HEIZMODUL).publish_state(value);
              return;
            }

#########################################
#                                       #
#   Sonstige Nachrichten                #
#                                       #
#########################################
    - can_id: 0x000
      then:
        - lambda: |-
            unsigned short canId = 000;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

    - can_id: 0x100
      then:
        - lambda: |-
            unsigned short canId = 100;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);
        
    - can_id: 0x301
      then:
        - lambda: |-
            unsigned short canId = 301;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

    - can_id: 0x302
      then:
        - lambda: |-
            unsigned short canId = 302;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

    - can_id: 0x509
      then:
        - lambda: |-
            unsigned short canId = 509;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);
  
    - can_id: 0x514
      then:
        - lambda: |-
            unsigned short canId = 514;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

    - can_id: 0x601
      then:
        - lambda: |-
            unsigned short canId = 601;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

    - can_id: 0x602
      then:
        - lambda: |-
            unsigned short canId = 602;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

    - can_id: 0x603
      then:
        - lambda: |-
            unsigned short canId = 603;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

    - can_id: 0x680
      then:
        - lambda: |-
            unsigned short canId = 680;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);

    - can_id: 0x700
      then:
        - lambda: |-
            unsigned short canId = 700;
            std::string value;
            const ElsterIndex* ei = processCanMessage(canId, value, x);



